# Regresszi√≥: c√©lnak haszn√°ld a teljesitmeny oszlopot, √©s dobd ki a kategoria oszlopot. 
# Ugyanazokat a feature-√∂ket (√≥ra, napszak, √©vszak One-Hot) etesd be a regresszorba, 
# √©s m√©rj MAE/RMSE-t.
# J√≥ baseline: LinearRegression (LinREG), azt√°n pr√≥b√°ld RandomForestRegressor-ral is.
#______________________________
# A KLASSZIFIK√ÅCI√ìBAN pontoss√°got m√©r√ºnk (LogisticRegression, DecisionTreeClassifier)
# A REGRESSZI√ìBAN hibaar√°nyt (LinearRegression, RandomForestRegressor)


# üìä Regresszi√≥ vs. Klasszifik√°ci√≥
# Tulajdons√°g	Regresszi√≥ üßÆ	Klasszifik√°ci√≥ üè∑Ô∏è
# Kimenet t√≠pusa	Folytonos (numerikus √©rt√©k, pl. √°r, teljes√≠tm√©ny)	Diszkr√©t (kateg√≥ria, pl. gyenge/k√∂zepes/er≈ës, 0/1)
# Tipikus feladat	‚ÄûMekkora lesz?‚Äù (√©rt√©kbecsl√©s)	‚ÄûMelyik csoportba tartozik?‚Äù (oszt√°lyoz√°s)
# Modellek p√©ld√°k	Linear Regression, Random Forest Regressor, SVR	Logistic Regression, Decision Tree Classifier, Random Forest Classifier, SVM
# Metrik√°k	MAE (√°tlagos abszol√∫t hiba), RMSE (n√©gyzetes hiba gy√∂k), R¬≤	Accuracy, Precision, Recall, F1-score, Confusion Matrix
# Kimenet p√©ld√°k	234 kW, 19.8 ¬∞C, 12.500 Ft	‚ÄûEr≈ës‚Äù, ‚ÄûK√∂zepes‚Äù, ‚ÄûGyenge‚Äù vagy ‚Äûigen/nem‚Äù
# Vizualiz√°ci√≥	Predik√°lt √©rt√©k vs. val√≥s √©rt√©k (scatter plot, line plot)	Confusion Matrix, ROC g√∂rbe, oszlopdiagram az oszt√°lyokhoz

import mlflow
import mlflow.sklearn
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
from sklearn.preprocessing import StandardScaler
import pickle
import matplotlib.pyplot as plt
from sklearn.metrics import mean_absolute_error, mean_squared_error
import numpy as np

mm_scaler = MinMaxScaler()
st_scaler = StandardScaler()

# adat beolvas√°s csv-b≈ël
solar_data = pd.read_csv('napelem_teljesitmeny_bovitett.csv')

# kateg√≥ri√°k dek√≥dol√°sa
df_encoded = pd.get_dummies(solar_data, columns=["napszak", "evszak","idopont"])

# train / test sz√©tv√°laszt√°sa
X = df_encoded.drop(columns=["teljesitmeny", "kategoria"])
y = df_encoded["teljesitmeny"]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)
print(X_train.dtypes)
#______________________________________MLflow loggol√°s
with mlflow.start_run():
    # sk√°l√°z√°s MinMaxScale-vel
    X_train_scaled = mm_scaler.fit_transform(X_train)
    X_test_scaled = mm_scaler.transform(X_test)

    # sk√°l√°z√°s stansardSale-vel
    X_train_st_scaled = st_scaler.fit_transform(X_train)
    X_test_st_scaled = st_scaler.transform(X_test)

    # MODELLEK k√©sz√≠t√©se  !!! LINE√ÅRIS REGRESSZI√ìN√ÅL NEM KELL MAX ITER? MERT ANALITIKUS MEGOLD√ÅSSAL DOLGOZIK !!!
    mm_linreg = LinearRegression()  
    mm_linreg.fit(X_train_scaled, y_train)

    st_linreg = LinearRegression()  
    st_linreg.fit(X_train_st_scaled, y_train)

    model = RandomForestRegressor(max_depth=5)
    model.fit(X_train,y_train)

    # ment√©s f√°jlba
    with open("solar_model.pkl", "wb") as f:
        pickle.dump(model, f)

    # el≈ërejelz√©sek
    predictions = model.predict(X_test)
    mm_preds = mm_linreg.predict(X_test_scaled)
    st_preds = st_linreg.predict(X_test_st_scaled)

    # m√©r√©sek
    mm_mae = mean_absolute_error(y_test, mm_preds)
    mm_rmse = np.sqrt(mean_squared_error(y_test, mm_preds))
    st_mae = mean_absolute_error(y_test, st_preds)
    st_rmse = np.sqrt(mean_squared_error(y_test, st_preds))
    rf_mae = mean_absolute_error(y_test, predictions)
    rf_rmse = np.sqrt(mean_squared_error(y_test, predictions))


    # Log param√©terek
    mlflow.log_param("max_depth", 5)

    # Log metrik√°k
    mlflow.log_metric("Mae_minmax", mm_mae)
    mlflow.log_metric("Rmse_minmax", mm_rmse)
    mlflow.log_metric("Mae_stand", st_mae)
    mlflow.log_metric("Rmse_stand", st_rmse)
    mlflow.log_metric("Mae_rf", rf_mae)
    mlflow.log_metric("Rmse_rf", rf_rmse)

    # Modell ment√©se
    mlflow.sklearn.log_model(model, "model")
    mlflow.sklearn.log_model(mm_linreg, "linreg_minmax")
    mlflow.sklearn.log_model(st_linreg, "linreg_standard")


scores = {
    "Mae_minmax": mm_mae,
    "Rmse_minmax": mm_rmse,
    "Mae_stand": st_mae,
    "Rmse_stand": st_rmse,
    "Mae_rf": rf_mae,
    "Rmse_rf": rf_rmse
}


# _____________________________GRAFIKONOK
colors = ["skyblue", "orange", "limegreen"]

fig, axs = plt.subplots(1, 2, figsize=(12, 6))
fig.suptitle("Modellek √∂sszehasonl√≠t√°sa (MAE √©s RMSE)", fontsize=16, color="navy")

# MAE diagram
mae_scores = {k:v for k,v in scores.items() if "Mae" in k}
axs[0].bar(mae_scores.keys(), mae_scores.values(), color=colors)
axs[0].set_title("MAE √∂sszehasonl√≠t√°s")
axs[0].set_ylabel("Hiba")

# RMSE diagram
rmse_scores = {k:v for k,v in scores.items() if "Rmse" in k}
axs[1].bar(rmse_scores.keys(), rmse_scores.values(), color=colors)
axs[1].set_title("RMSE √∂sszehasonl√≠t√°s")
axs[1].set_ylabel("Hiba")

plt.tight_layout()
plt.show()
